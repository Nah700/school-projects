-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/mypandoc#readme</a>
@package mypandoc
@version 0.1.0.0

module Document
data Document
Document :: Header -> [Content] -> Document
data Header
Header :: String -> Maybe String -> Maybe String -> Header
[title] :: Header -> String
[author] :: Header -> Maybe String
[date] :: Header -> Maybe String
data Content
Text :: String -> Content
Formatting :: FormattingElement -> Content
Link :: String -> [Content] -> Content
Image :: String -> [Content] -> Content
Paragraph :: [Content] -> Content
Section :: Maybe String -> [Content] -> Content
CodeBlock :: [Content] -> Content
List :: [Content] -> Content
data FormattingElement
Italic :: String -> FormattingElement
Bold :: String -> FormattingElement
Code :: String -> FormattingElement
instance GHC.Classes.Eq Document.Header
instance GHC.Show.Show Document.Header
instance GHC.Classes.Eq Document.FormattingElement
instance GHC.Show.Show Document.FormattingElement
instance GHC.Classes.Eq Document.Content
instance GHC.Show.Show Document.Content
instance GHC.Classes.Eq Document.Document
instance GHC.Show.Show Document.Document

module DocumentToMarkdown
documentToMarkdown :: Document -> String

module Indent
generateIndent :: Int -> String
addIndent :: Int -> String -> String
escapeString :: String -> String

module DocumentToXml
documentToXml :: Document -> String
data Document

module DocumentToJson
documentToJson :: Document -> String
data Document

module ParserData
newtype Parser a
Parser :: (String -> Either String (a, String)) -> Parser a
[runParser] :: Parser a -> String -> Either String (a, String)
parseChar :: Char -> Parser Char
parseAnyChar :: String -> Parser Char
parseOr :: Parser a -> Parser a -> Parser a
parseAnd :: Parser a -> Parser b -> Parser (a, b)
parseAndWith :: (a -> b -> c) -> Parser a -> Parser b -> Parser c
parseMany :: Parser a -> Parser [a]
parseSome :: Parser a -> Parser [a]
parseUInt :: Parser Int
parseInt :: Parser Int
parseUDouble :: Parser Double
parseDouble :: Parser Double
parseTuple :: Parser a -> Parser (a, a)
parseTruple :: Parser (Int, Int, Int)
instance GHC.Base.Functor ParserData.Parser
instance GHC.Base.Applicative ParserData.Parser
instance GHC.Base.Alternative ParserData.Parser
instance GHC.Base.Monad ParserData.Parser
instance Control.Monad.Fail.MonadFail ParserData.Parser

module JsonParser
data JsonValue
JsonString :: String -> JsonValue
JsonArray :: [JsonValue] -> JsonValue
JsonObject :: [(String, JsonValue)] -> JsonValue
parseObject :: Parser JsonValue
parseArray :: Parser JsonValue
parseString :: Parser String
parseWhitespace :: Parser ()
parseJsonString :: Parser JsonValue
parseJsonValue :: Parser JsonValue
instance GHC.Classes.Eq JsonParser.JsonValue
instance GHC.Show.Show JsonParser.JsonValue

module JsonToDocument
jsonToDocument :: String -> Either String Document

module Parsing
data MyOptions
MyOptions :: FilePath -> String -> FilePath -> String -> MyOptions
[_ifile] :: MyOptions -> FilePath
[_oformat] :: MyOptions -> String
[_ofile] :: MyOptions -> FilePath
[_iformat] :: MyOptions -> String
getArgsOpt :: IO MyOptions
readMyFile :: FilePath -> IO [Char]

-- | Computation <a>exitWith</a> <tt>code</tt> throws <a>ExitCode</a>
--   <tt>code</tt>. Normally this terminates the program, returning
--   <tt>code</tt> to the program's caller.
--   
--   On program termination, the standard <a>Handle</a>s <a>stdout</a> and
--   <a>stderr</a> are flushed automatically; any other buffered
--   <a>Handle</a>s need to be flushed manually, otherwise the buffered
--   data will be discarded.
--   
--   A program that fails in any other way is treated as if it had called
--   <a>exitFailure</a>. A program that terminates successfully without
--   calling <a>exitWith</a> explicitly is treated as if it had called
--   <a>exitWith</a> <a>ExitSuccess</a>.
--   
--   As an <a>ExitCode</a> is not an <a>IOException</a>, <a>exitWith</a>
--   bypasses the error handling in the <a>IO</a> monad and cannot be
--   intercepted by <a>catch</a> from the <a>Prelude</a>. However it is a
--   <a>SomeException</a>, and can be caught using the functions of
--   <a>Control.Exception</a>. This means that cleanup computations added
--   with <a>bracket</a> (from <a>Control.Exception</a>) are also executed
--   properly on <a>exitWith</a>.
--   
--   Note: in GHC, <a>exitWith</a> should be called from the main program
--   thread in order to exit the process. When called from another thread,
--   <a>exitWith</a> will throw an <tt>ExitException</tt> as normal, but
--   the exception will not cause the process itself to exit.
exitWith :: ExitCode -> IO a

-- | Defines the exit codes that a program can return.
data ExitCode

-- | indicates program failure with an exit code. The exact interpretation
--   of the code is operating-system dependent. In particular, some values
--   may be prohibited (e.g. 0 on a POSIX-compliant system).
ExitFailure :: Int -> ExitCode
instance GHC.Show.Show Parsing.MyOptions

module XmlParser
data XmlValue
XmlElement :: String -> [(String, String)] -> [XmlValue] -> XmlValue
XmlText :: String -> XmlValue
parseXmlValue :: Parser XmlValue
parseXmlElement :: Parser XmlValue
instance GHC.Classes.Eq XmlParser.XmlValue
instance GHC.Show.Show XmlParser.XmlValue

module XmlToDocument
xmlToDocument :: String -> Either String Document
